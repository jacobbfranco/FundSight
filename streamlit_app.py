import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from fpdf import FPDF
import os
import tempfile

st.set_page_config(page_title="FundSight: Nonprofit Finance Dashboard", layout="wide")
st.title("üìä FundSight: QuickBooks Dashboard for Nonprofits")

# --- MULTI-CLIENT SELECTION ---
st.sidebar.header("üë• Client Selection")
client_names = ["Client A", "Client B", "Client C"]
selected_client = st.sidebar.selectbox("Select Client", client_names)

# Uploads
st.sidebar.markdown(f"### Upload files for {selected_client}")
uploaded_file = st.sidebar.file_uploader("Upload QuickBooks CSV", type=["csv"], key=f"{selected_client}_qb")
budget_file = st.sidebar.file_uploader("Upload Budget CSV (optional)", type=["csv"], key=f"{selected_client}_budget")

if uploaded_file:
    st.markdown(f"### üìÇ Dashboard for `{selected_client}`")
    df = pd.read_csv(uploaded_file)
    df["Date"] = pd.to_datetime(df["Date"])
    df["Account"] = df["Account"].str.strip()
    if "Name" in df.columns:
        df["Name"] = df["Name"].fillna("Unknown")

    income = df[df["Amount"] > 0]["Amount"].sum()
    expenses = df[df["Amount"] < 0]["Amount"].sum()
    net = income + expenses

    col1, col2, col3 = st.columns(3)
    col1.metric("üü¢ Total Income", f"${income:,.2f}")
    col2.metric("üî¥ Total Expenses", f"${expenses:,.2f}")
    col3.metric("üí∞ Net Cash Flow", f"${net:,.2f}")
    st.markdown("---")

    chart_paths = []

    # Daily Cash Flow
    st.subheader("üìà Daily Cash Flow Trend")
    daily_totals = df.groupby("Date")["Amount"].sum().reset_index()
    st.line_chart(daily_totals.set_index("Date"))
    fig1, ax1 = plt.subplots()
    ax1.plot(daily_totals["Date"], daily_totals["Amount"])
    ax1.set_title("Daily Cash Flow")
    temp1 = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    fig1.savefig(temp1.name)
    chart_paths.append(temp1.name)

    # Expense by Category (Stacked Horizontal)
    st.subheader("üìä Expenses by Account Category")
    expense_df = df[df["Amount"] < 0]
    by_category = expense_df.groupby("Account")["Amount"].sum().sort_values()
    st.bar_chart(by_category.abs())
    fig2, ax2 = plt.subplots(figsize=(6, 4))
    by_category.abs().plot(kind='barh', ax=ax2)
    ax2.set_title("Expenses by Category")
    plt.tight_layout()
    temp2 = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    fig2.savefig(temp2.name)
    chart_paths.append(temp2.name)

    # Pie Chart
    st.subheader("üßÅ Expense Distribution")
    fig3, ax3 = plt.subplots()
    ax3.pie(by_category.abs(), labels=by_category.index, autopct="%1.1f%%", startangle=90)
    ax3.axis("equal")
    st.pyplot(fig3)
    temp3 = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    fig3.savefig(temp3.name)
    chart_paths.append(temp3.name)

    # Forecast
    st.subheader("üìÖ 30-Day Cash Flow Projection")
    daily_avg = daily_totals["Amount"].mean()
    future_dates = pd.date_range(start=daily_totals["Date"].max() + timedelta(days=1), periods=30)
    forecast_df = pd.DataFrame({"Date": future_dates, "Amount": daily_avg})
    st.line_chart(forecast_df.set_index("Date"))

    # Budget Comparison
    if budget_file is not None:
        st.subheader("üìã Budget vs Actuals")
        budget_df = pd.read_csv(budget_file)
        budget_df.columns = budget_df.columns.str.strip()
        budget_df["Account"] = budget_df["Account"].str.strip()
        if {"Account", "Budget Amount"}.issubset(budget_df.columns):
            actuals = df.groupby("Account")["Amount"].sum()
            comparison = pd.merge(budget_df, actuals.rename("Actual"), on="Account", how="outer").fillna(0)
            comparison["Variance"] = comparison["Actual"] - comparison["Budget Amount"]
            comparison["Variance %"] = (comparison["Variance"] / comparison["Budget Amount"].replace(0, 1)) * 100
            st.dataframe(comparison)
            st.bar_chart(comparison.set_index("Account")[["Budget Amount", "Actual"]].abs())

    # Trend Analysis
    st.subheader("üìâ Trend Analysis")
    monthly_trend = df.groupby(df["Date"].dt.to_period("M"))["Amount"].sum().reset_index()
    monthly_trend["Date"] = monthly_trend["Date"].astype(str)
    st.line_chart(monthly_trend.set_index("Date"))

    # Revenue Sources
    if "Name" in df.columns:
        st.subheader("üíå Top Revenue Sources")
        top_sources = df[df["Amount"] > 0].groupby("Name")["Amount"].sum().sort_values(ascending=False).head(10)
        st.bar_chart(top_sources)

    # Expense Drill-down
    st.subheader("üîç Monthly Expense Drill-down")
    expense_by_month = expense_df.groupby([df["Date"].dt.to_period("M"), "Account"])["Amount"].sum().unstack().fillna(0)
    st.line_chart(expense_by_month.abs())

    # KPIs
    st.subheader("üìä Key Financial Ratios")
    cash_on_hand = df["Amount"].sum()
    monthly_expense_avg = abs(df[df["Amount"] < 0].set_index("Date")["Amount"].resample("M").sum().mean())
    kpis = {
        "Days Cash on Hand": (cash_on_hand / monthly_expense_avg * 30) if monthly_expense_avg else 0,
        "Program Expense Ratio": abs(expense_df["Amount"].sum()) / abs(df["Amount"].sum()) if not df.empty else 0,
    }
    for label, value in kpis.items():
        st.metric(label, f"{value:,.1f}" if "Ratio" not in label else f"{value:.2%}")

    # Alerts
    st.subheader("üîî Alerts")
    cash_threshold = st.number_input("Set Minimum Cash Threshold", value=5000)
    if cash_on_hand < cash_threshold:
        st.error(f"‚ö†Ô∏è Alert: Cash on hand is below threshold (${cash_threshold})")
    else:
        st.success("‚úÖ Cash on hand is above the safe threshold.")

    # Scenario Modeling
    st.subheader("üîÑ Scenario Modeling")
    donation_increase = st.slider("Increase Donations by (%)", -50, 100, 0)
    expense_reduction = st.slider("Reduce Expenses by (%)", 0, 50, 0)
    scenario_income = income * (1 + donation_increase / 100)
    scenario_expense = expenses * (1 - expense_reduction / 100)
    scenario_net = scenario_income + scenario_expense
    st.write(f"üìà Scenario Net Cash Flow: ${scenario_net:,.2f}")

    # Multi-Year
    st.subheader("üìÜ Multi-Year Comparison")
    if df["Date"].dt.year.nunique() > 1:
        multi_year = df.groupby(df["Date"].dt.year)["Amount"].sum()
        st.bar_chart(multi_year)

    # --- PDF GENERATION ---
    st.subheader("üìß Generate and Email Full PDF Report")
    if st.button("Send PDF Report"):
        try:
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", "B", 16)
            pdf.cell(200, 10, f"FundSight Financial Summary - {selected_client}", ln=True)

            pdf.set_font("Arial", size=12)
            pdf.ln(10)
            pdf.cell(200, 10, f"Total Income: ${income:,.2f}", ln=True)
            pdf.cell(200, 10, f"Total Expenses: ${expenses:,.2f}", ln=True)
            pdf.cell(200, 10, f"Net Cash Flow: ${net:,.2f}", ln=True)
            pdf.cell(200, 10, f"Days Cash on Hand: {kpis['Days Cash on Hand']:.1f}", ln=True)
            pdf.cell(200, 10, f"Program Expense Ratio: {kpis['Program Expense Ratio']:.2%}", ln=True)

            for path in chart_paths:
                pdf.ln(10)
                pdf.image(path, w=180)

            pdf_path = os.path.join(tempfile.gettempdir(), "fundsight_report.pdf")
            pdf.output(pdf_path)

            # --- Email ---
            sender_email = st.secrets["email_user"]
            sender_password = st.secrets["email_password"]
            msg = MIMEMultipart()
            msg["From"] = sender_email
            msg["To"] = "jacob.b.franco@gmail.com"
            msg["Subject"] = f"FundSight Dashboard Report - {selected_client}"
            body = f"""Attached is the FundSight dashboard report for {selected_client}.

Net Cash Flow: ${net:,.2f}
Total Income: ${income:,.2f}
Total Expenses: ${expenses:,.2f}
Days Cash on Hand: {kpis['Days Cash on Hand']:.1f}
Program Expense Ratio: {kpis['Program Expense Ratio']:.2%}
"""
            msg.attach(MIMEText(body, "plain"))
            with open(pdf_path, "rb") as f:
                part = MIMEText(f.read(), "base64", "utf-8")
                part.add_header("Content-Disposition", "attachment", filename="fundsight_report.pdf")
                msg.attach(part)

            server = smtplib.SMTP("smtp.gmail.com", 587)
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(msg["From"], msg["To"], msg.as_string())
            server.quit()
            st.success("‚úÖ Report sent successfully!")
        except Exception as e:
            st.error(f"‚ùå Failed to send report: {e}")

else:
    st.info("üì§ Please upload a QuickBooks CSV file to get started.")
